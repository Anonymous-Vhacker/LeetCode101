#include <string>#include "solutions.h"#include <iostream>void test_455() {    assign_cookies_455::Solution c455_Solution;    vector<int> g,s;    g = {1,2};    s = {1,2,3};    cout << "input: " << endl;    cout << "g = " << g << endl;    cout << "s = " << s << endl;    auto result = c455_Solution.findContentChildren(g, s);    cout << "result: " << result << endl;}void test_135() {    candy_135::Solution c135_Solution;    vector<int> ratings = {1,0,2};    cout << "input: " << endl;    cout << "ratings = " << ratings << endl;    auto result = c135_Solution.candy(ratings);    cout << "result: " << result << endl;}void test_435() {    non_overlapping_intervals_435::Solution c435_Solution;    vector<vector<int>> intervals = {{1,2}, {2,3}, {3,4}, {1,3}};    cout << "input: " << endl;    cout << "flowerbed = " << intervals << endl;    auto result = c435_Solution.eraseOverlapIntervals(intervals);    cout << "result: " << result << endl;}void test_605() {    can_place_flowers_605::Solution c605_Solution;    vector<int> flowerbed = {1,0,0,0,1};    int n = 2;    cout << "input: " << endl;    cout << "flowerbed = " << flowerbed << endl;    cout << "n = " << n << endl;    auto result = c605_Solution.canPlaceFlowers(flowerbed, n);    cout << "result: " << result << endl;}void test_452() {    minimum_number_of_arrows_452::Solution c452_Solution;    vector<vector<int>> points = {{10,16},{2,8},{1,6},{7,12}};    cout << "input: " << endl << "points = " << points << endl;    auto result = c452_Solution.findMinArrowShots(points);    cout << "result: " << result << endl;}void test_452_2() {    minimum_number_of_arrows_452::Solution c452_Solution;    vector<vector<int>> points = {{10,16},{2,8},{1,6},{7,12}};    cout << "input: " << endl;    cout << "points = " << points << endl;    auto result = c452_Solution.findMinArrowShots2(points);    cout << "result: " << result << endl;}void test_763() {    partition_labels_763::Solution c763_Solution;    string s = "ababcbacadefegdehijhklij";    cout << "input: " << endl;    cout << "s = " << s << endl;    auto result = c763_Solution.partitionLabels(s);    cout << "result: " << result << endl;}void test_122() {    best_time_to_buy_and_sell_stock_ii_122::Solution c122_Solution;    vector<int> prices = {7,1,5,3,6,4};    cout << "input: " << endl;    cout << "prices = " << prices << endl;    auto result = c122_Solution.maxProfit(prices);    cout << "result: " << result << endl;}void test_406() {    queue_reconstruction_by_height_406::Solution c406_Solution;    vector<vector<int>> people = {{9,0},{7,0},{1,9},{3,0},{2,7},{5,3},{6,0},{3,4},{6,2},{5,2}};    cout << "input: " << endl;    cout << "people = " << people << endl;    auto result = c406_Solution.reconstructQueue(people);    cout << "result : " << result << endl;//    cout << "answer : " << "[[3, 0], [6, 0], [7, 0], [5, 2], [3, 4], [5, 3], [6, 2], [2, 7], [9, 0], [1, 9]]" << endl;}void test_665() {    non_decreasing_array_665::Solution c665_Solution;    vector<int> nums = {-1,4,2,3};    cout << "input: " << endl;    cout << "nums = " << nums << endl;    auto result = c665_Solution.checkPossibility(nums);    cout << "result : " << result << endl;}int main() {//    test_455();//    test_135();//    test_435();//    test_605();//    test_452();//    test_452_2();//    test_763();//    test_122();//    test_406();    test_665();    return 0;}